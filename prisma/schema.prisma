// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  email             String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  email        String
  expires      DateTime
  user         User     @relation(fields: [email], references: [email], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  email     String    @id
  password String    @db.VarChar(22)
  name      String    @db.VarChar(60)
  avatar   String?   @db.VarChar(60)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Account   Account[]
  Session   Session[]
  Habit     Habit[]
  UTCOffset Int @default(-6)
}

model Habit {
  id        String         @id @default(uuid())
  User      User           @relation(fields: [userEmail], references: [email])
  userEmail String
  name      String         @db.VarChar(60)
  identity String @default("")
  stock     Float          @default(10)
  History   HabitHistory[]
  cue       String
  craving   String
  response  String
  reward    String
  createdAt DateTime       @default(now())
  status    String         @default("STATUS_NEUTRAL")
  temporality      String @default("TEMPORALITY_DAILY")
  stashed   Boolean        @default(false)
  good      Boolean        @default(true) // creating good habit (T) vs breaking bad habit (F)
  duration  Int
  location  String         @default("Anywhere")
}

model HabitHistory {
  id      String   @id @default(uuid())
  Habit   Habit    @relation(fields: [habitId], references: [id])
  habitId String
  date    DateTime @default(now())
  stock   Float    @default(10)
  status  String
}
